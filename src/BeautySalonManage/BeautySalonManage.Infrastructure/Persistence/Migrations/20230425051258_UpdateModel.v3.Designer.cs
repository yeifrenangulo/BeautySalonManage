// <auto-generated />
using System;
using BeautySalonManage.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeautySalonManage.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230425051258_UpdateModel.v3")]
    partial class UpdateModelv3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Collaborator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador Único del Colaborador");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Dirección del Colaborador");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación de Registro");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Email del Colaborador");

                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasComment("Género del Colaborador");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Estás Activo) (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Última Modificación de Registro");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Nombre del Colaborador");

                    b.Property<string>("NameContact")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Nombre de Contacto del Colaborador");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Teléfono del Colaborador");

                    b.Property<string>("PhoneContact")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Teléfono de Contacto del Colaborador");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Apellido del Colaborador");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GenderId" }, "FK_CollaboratorGenderId");

                    b.HasIndex(new[] { "Name", "Surname" }, "IDX_CollaboratorsName")
                        .IsUnique();

                    b.ToTable("Collaborators", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.CollaboratorService", b =>
                {
                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Colaborador");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Servicio");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha Última Modificación del Registro");

                    b.Property<decimal>("Percentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Porcentaje del Servicio");

                    b.HasKey("CollaboratorId", "ServiceId")
                        .HasName("PK_CollaboratorServices");

                    b.HasIndex("ServiceId");

                    b.ToTable("CollaboratorServices", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador Único del Cliente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Regitro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Nacimiento del Cliente");

                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasComment("Género del Cliente");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de la Última Modificación del Regitro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la Última Modificación del Registro");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Nombre del Cliente");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Teléfono del Cliente");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Apellido del Cliente");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("Name", "Surname")
                        .IsUnique()
                        .HasDatabaseName("IDX_NameSurname");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador Único del Género");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Regitro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de la Última Modificación del Regitro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la Última Modificación del Registro");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Descripción del Género");

                    b.HasKey("Id");

                    b.ToTable("Genders", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.MenuOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador Único de la Opción de Menú");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Icono de la Opción");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de la Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la Última Modificación del Registro");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasComment("Orden de la Opción");

                    b.Property<int?>("ParentOption")
                        .HasColumnType("int")
                        .HasComment("Opción de Menú Padre");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Descripción de la Opción de Menú");

                    b.HasKey("Id");

                    b.ToTable("MenuOptions", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Identificador Único de la Venta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("float(10)")
                        .HasComment("Monto de la Venta");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<DateTime>("DateSale")
                        .HasColumnType("datetime")
                        .HasComment("Fecha del Turno");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha Última Modificación del Registro");

                    b.Property<string>("NameCustomer")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Nombre del Cliente de la Venta");

                    b.Property<string>("Observation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Observación de la Venta");

                    b.Property<string>("PhoneCustomer")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Teléfono del Cliente de la Venta");

                    b.Property<long?>("TurnId")
                        .HasColumnType("bigint")
                        .HasComment("Turno asociado a la Vente");

                    b.HasKey("Id");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.SaleAdditionalDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Identificador Único del Detalle Adicional de la Venta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Colaborador");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Detalle de la Venta");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha Última Modificación del Registro");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Precio detalle de la Venta");

                    b.Property<long>("SaleId")
                        .HasColumnType("bigint")
                        .HasComment("Identificador de la Venta");

                    b.HasKey("Id");

                    b.HasIndex("CollaboratorId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleAdditionalDetails", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.SaleDetail", b =>
                {
                    b.Property<long>("SaleId")
                        .HasColumnType("bigint")
                        .HasComment("Identificador de la Venta");

                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Colaborador");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Servicio");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha Última Modificación del Registro");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Precio Servico del Turno");

                    b.HasKey("SaleId", "CollaboratorId", "ServiceId")
                        .HasName("PK_SaleDetails");

                    b.HasIndex("CollaboratorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SaleDetails", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador Único del Servicio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("")
                        .HasComment("Color Identificador del Servicio");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación de Registro");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Detalle del Servicio");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Duración del Servicio");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Estás Activo) (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Última Modificación de Registro");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Precio del Servicio");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Titulo del Servicio");

                    b.HasKey("Id");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.SettlementPayments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Identificador Único de la Venta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Monto de la Venta");

                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Colaborador");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Fin de la Liquidación");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha Última Modificación del Registro");

                    b.Property<string>("Observation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Observación de la Venta");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Inicio de la Liquidación");

                    b.HasKey("Id");

                    b.HasIndex("CollaboratorId");

                    b.ToTable("SettlementPayments", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.SettlementPaymentsDetail", b =>
                {
                    b.Property<long>("SettlementPaymentsId")
                        .HasColumnType("bigint")
                        .HasComment("Identificador Único de la Liquidación");

                    b.Property<long>("SaleId")
                        .HasColumnType("bigint")
                        .HasComment("Identificador Único de la Venta");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha Última Modificación del Registro");

                    b.HasKey("SettlementPaymentsId", "SaleId")
                        .HasName("PK_SettlementPaymentsDetails");

                    b.HasIndex("SaleId");

                    b.ToTable("SettlementPaymentsDetails", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador Único del Estado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de la Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la Última Modificación del Registro");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Descripción del Estado");

                    b.HasKey("Id");

                    b.ToTable("States", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Turn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Identificador Único del Turno");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasComment("Hora Final del Turno");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha Última Modificación del Registro");

                    b.Property<string>("NameCustomer")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Nombre del Cliente del Turno");

                    b.Property<string>("Observation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Observación del Turno");

                    b.Property<string>("PhoneCustomer")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Teléfono del Cliente del Turno");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasComment("Fecha del Turno");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasComment("Hora Inicial del Turno");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Estado");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Turns", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.TurnAdditionalDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Identificador Único del Detalle Adicional del Turno");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Colaborador");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Detalle del Turno");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha Última Modificación del Registro");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Precio detalle del Turno");

                    b.Property<long>("TurnId")
                        .HasColumnType("bigint")
                        .HasComment("Identificador del Turno");

                    b.HasKey("Id");

                    b.HasIndex("CollaboratorId");

                    b.HasIndex("TurnId");

                    b.ToTable("TurnAdditionalDetails", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.TurnDetail", b =>
                {
                    b.Property<long>("TurnId")
                        .HasColumnType("bigint")
                        .HasComment("Identificador del Turno");

                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Colaborador");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Servicio");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha Última Modificación del Registro");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Precio Servico del Turno");

                    b.HasKey("TurnId", "CollaboratorId", "ServiceId")
                        .HasName("PK_TurnDetails");

                    b.HasIndex("CollaboratorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("TurnDetails", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Infrastructure.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Collaborator", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Gender", "Gender")
                        .WithMany("Collaborators")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("Collaborator_GenderId_FK");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.CollaboratorService", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Collaborator", "Collaborator")
                        .WithMany("CollaboratorServices")
                        .HasForeignKey("CollaboratorId")
                        .IsRequired()
                        .HasConstraintName("CollaboratorServices_CollaboratorId_FK");

                    b.HasOne("BeautySalonManage.Domain.Entities.Service", "Service")
                        .WithMany("CollaboratorServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("CollaboratorServices_ServiceId_FK");

                    b.Navigation("Collaborator");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Customer", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Gender", "Gender")
                        .WithMany("Customers")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_Gender_GenderId");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.SaleAdditionalDetail", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Collaborator", "Collaborator")
                        .WithMany("SaleAdditionalDetails")
                        .HasForeignKey("CollaboratorId")
                        .IsRequired()
                        .HasConstraintName("SaleAdditionalDetailsCollaborators_FK");

                    b.HasOne("BeautySalonManage.Domain.Entities.Sale", "Sale")
                        .WithMany("SaleAdditionalDetails")
                        .HasForeignKey("SaleId")
                        .IsRequired()
                        .HasConstraintName("SaleAdditionalDetailsSales_FK");

                    b.Navigation("Collaborator");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.SaleDetail", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Collaborator", "Collaborator")
                        .WithMany("SaleDetails")
                        .HasForeignKey("CollaboratorId")
                        .IsRequired()
                        .HasConstraintName("SaleDetailsCollaborator_FK");

                    b.HasOne("BeautySalonManage.Domain.Entities.Sale", "Sale")
                        .WithMany("SaleDetails")
                        .HasForeignKey("SaleId")
                        .IsRequired()
                        .HasConstraintName("SaleDetailsTurn_FK");

                    b.HasOne("BeautySalonManage.Domain.Entities.Service", "Service")
                        .WithMany("SaleDetails")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("SaleDetailsService_FK");

                    b.Navigation("Collaborator");

                    b.Navigation("Sale");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.SettlementPayments", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Collaborator", "Collaborator")
                        .WithMany("SettlementPayments")
                        .HasForeignKey("CollaboratorId")
                        .IsRequired()
                        .HasConstraintName("FK_SettlementPaymentsCollaboratorId");

                    b.Navigation("Collaborator");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.SettlementPaymentsDetail", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Sale", "Sale")
                        .WithMany("SettlementPaymentsDetails")
                        .HasForeignKey("SaleId")
                        .IsRequired()
                        .HasConstraintName("FK_SettlementPaymentsDetailsSaleId");

                    b.HasOne("BeautySalonManage.Domain.Entities.SettlementPayments", "SettlementPayment")
                        .WithMany("SettlementPaymentsDetails")
                        .HasForeignKey("SettlementPaymentsId")
                        .IsRequired()
                        .HasConstraintName("FK_SettlementPaymentsDetailsettlementPaymentsId");

                    b.Navigation("Sale");

                    b.Navigation("SettlementPayment");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Turn", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.State", "States")
                        .WithMany("Turns")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("TurnsStatus_FK");

                    b.Navigation("States");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.TurnAdditionalDetail", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Collaborator", "Collaborator")
                        .WithMany("TurnAdditionalDetails")
                        .HasForeignKey("CollaboratorId")
                        .IsRequired()
                        .HasConstraintName("TurnAdditionalDetailsCollaborators_FK");

                    b.HasOne("BeautySalonManage.Domain.Entities.Turn", "Turn")
                        .WithMany("TurnAdditionalDetails")
                        .HasForeignKey("TurnId")
                        .IsRequired()
                        .HasConstraintName("TurnAdditionalDetailsTurns_FK");

                    b.Navigation("Collaborator");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.TurnDetail", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Collaborator", "Collaborator")
                        .WithMany("TurnDetails")
                        .HasForeignKey("CollaboratorId")
                        .IsRequired()
                        .HasConstraintName("TurnDetailsCollaborator_FK");

                    b.HasOne("BeautySalonManage.Domain.Entities.Service", "Service")
                        .WithMany("TurnDetails")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("TurnDetailsService_FK");

                    b.HasOne("BeautySalonManage.Domain.Entities.Turn", "Turn")
                        .WithMany("TurnDetails")
                        .HasForeignKey("TurnId")
                        .IsRequired()
                        .HasConstraintName("TurnDetailsTurn_FK");

                    b.Navigation("Collaborator");

                    b.Navigation("Service");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BeautySalonManage.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BeautySalonManage.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BeautySalonManage.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("BeautySalonManage.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautySalonManage.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BeautySalonManage.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Collaborator", b =>
                {
                    b.Navigation("CollaboratorServices");

                    b.Navigation("SaleAdditionalDetails");

                    b.Navigation("SaleDetails");

                    b.Navigation("SettlementPayments");

                    b.Navigation("TurnAdditionalDetails");

                    b.Navigation("TurnDetails");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Collaborators");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Sale", b =>
                {
                    b.Navigation("SaleAdditionalDetails");

                    b.Navigation("SaleDetails");

                    b.Navigation("SettlementPaymentsDetails");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Service", b =>
                {
                    b.Navigation("CollaboratorServices");

                    b.Navigation("SaleDetails");

                    b.Navigation("TurnDetails");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.SettlementPayments", b =>
                {
                    b.Navigation("SettlementPaymentsDetails");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.State", b =>
                {
                    b.Navigation("Turns");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Turn", b =>
                {
                    b.Navigation("TurnAdditionalDetails");

                    b.Navigation("TurnDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
