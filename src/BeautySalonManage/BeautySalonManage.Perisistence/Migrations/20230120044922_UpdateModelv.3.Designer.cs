// <auto-generated />
using System;
using BeautySalonManage.Perisistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeautySalonManage.Perisistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230120044922_UpdateModelv.3")]
    partial class UpdateModelv3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Collaborator", b =>
                {
                    b.Property<int>("CollaboratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador Único del Colaborador");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollaboratorId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Dirección del Colaborador");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación de Registro");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Email del Colaborador");

                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasComment("Género del Colaborador");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Estás Activo) (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Última Modificación de Registro");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Nombre del Colaborador");

                    b.Property<string>("NameContact")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Nombre de Contacto del Colaborador");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Teléfono del Colaborador");

                    b.Property<string>("PhoneContact")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Teléfono de Contacto del Colaborador");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Apellido del Colaborador");

                    b.HasKey("CollaboratorId");

                    b.HasIndex(new[] { "GenderId" }, "FK_CollaboratorGenderId");

                    b.HasIndex(new[] { "Name", "Surname" }, "IDX_CollaboratorsName")
                        .IsUnique();

                    b.ToTable("Collaborators", (string)null);

                    b.HasComment("Información de los Colaboradores");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.CollaboratorService", b =>
                {
                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Colaborador");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Servicio");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha Última Modificación del Registro");

                    b.Property<decimal>("Percentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Porcentaje del Servicio");

                    b.HasKey("CollaboratorId", "ServiceId")
                        .HasName("PK_CollaboratorServices");

                    b.HasIndex("ServiceId");

                    b.ToTable("CollaboratorServices", (string)null);

                    b.HasComment("Información de Servicio por Colaborador");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador Único del Cliente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Regitro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Nacimiento del Cliente");

                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasComment("Género del Cliente");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de la Última Modificación del Regitro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la Última Modificación del Registro");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Nombre del Cliente");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Teléfono del Cliente");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Apellido del Cliente");

                    b.HasKey("CustomerId");

                    b.HasIndex("GenderId");

                    b.HasIndex("Name", "Surname")
                        .IsUnique()
                        .HasDatabaseName("IDX_NameSurname");

                    b.ToTable("Customers", (string)null);

                    b.HasComment("Información de los Clientes");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador Único del Género");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Regitro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Descripción del Género");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de la Última Modificación del Regitro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la Última Modificación del Registro");

                    b.HasKey("GenderId");

                    b.ToTable("Genders", (string)null);

                    b.HasComment("Información de los Géneros (1 = Hombre, 2 = Mujer)");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.MenuOption", b =>
                {
                    b.Property<int>("MenuOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador Único de la Opción de Menú");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuOptionId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Descripción de la Opción de Menú");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Icono de la Opción");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de la Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la Última Modificación del Registro");

                    b.Property<int>("Order")
                        .HasColumnType("int")
                        .HasComment("Orden de la Opción");

                    b.Property<int?>("ParentOption")
                        .HasColumnType("int")
                        .HasComment("Opción de Menú Padre");

                    b.HasKey("MenuOptionId");

                    b.ToTable("MenuOptions", (string)null);

                    b.HasComment("Información de las Opciones del Menú");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.MenuOptionRole", b =>
                {
                    b.Property<int>("MenuOptionId")
                        .HasColumnType("int")
                        .HasComment("Identificador de la Opcion Menu");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Rol");

                    b.Property<bool>("AllowCreate")
                        .HasColumnType("bit")
                        .HasComment("Permite Crear en la Opción");

                    b.Property<bool>("AllowRead")
                        .HasColumnType("bit")
                        .HasComment("Permite Consultar en la Opción");

                    b.Property<bool>("AllowRemove")
                        .HasColumnType("bit")
                        .HasComment("Permite Eliminar en la Opción");

                    b.Property<bool>("AllowUpdate")
                        .HasColumnType("bit")
                        .HasComment("Permite Actualizar en la Opción");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha Última Modificación del Registro");

                    b.HasKey("MenuOptionId", "RoleId")
                        .HasName("PRIMARY");

                    b.HasIndex("RoleId");

                    b.ToTable("MenuOptionRoles", (string)null);

                    b.HasComment("Información de Opciones Rol");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador Único del Rol");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Descripción del Rol");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de la Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la Última Modificación del Registro");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);

                    b.HasComment("Información de los Roles");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador Único del Servicio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación de Registro");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Detalle del Servicio");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Duración del Servicio");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Estás Activo) (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Última Modificación de Registro");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Precio del Servicio");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Titulo del Servicio");

                    b.HasKey("ServiceId");

                    b.ToTable("Services", (string)null);

                    b.HasComment("Información de los Servicios");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador Único del Estado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Descripción del Estado");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de la Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la Última Modificación del Registro");

                    b.HasKey("StatusId");

                    b.ToTable("Status", (string)null);

                    b.HasComment("Información de los Estados");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Turn", b =>
                {
                    b.Property<long>("TurnId")
                        .HasColumnType("bigint")
                        .HasComment("Identificador Único del Turno");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime")
                        .HasComment("Hora Final del Turno");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha Última Modificación del Registro");

                    b.Property<string>("NameCustomer")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Nombre del Cliente del Turno");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Observación del Turno");

                    b.Property<string>("PhoneCustomer")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Teléfono del Cliente del Turno");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasComment("Fecha del Turno");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasComment("Hora Inicial del Turno");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Estado");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Precio Total del Turno");

                    b.HasKey("TurnId");

                    b.HasIndex("StatusId");

                    b.ToTable("Turns", (string)null);

                    b.HasComment("Información de los Turnos");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.TurnAdditionalDetail", b =>
                {
                    b.Property<long>("TurnAdditionalDetailId")
                        .HasColumnType("bigint")
                        .HasComment("Identificador Único del Detalle Adicional del Turno");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Detalle del Turno");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha Última Modificación del Registro");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Precio detalle del Turno");

                    b.Property<long>("TurnId")
                        .HasColumnType("bigint")
                        .HasComment("Identificador del Turno");

                    b.HasKey("TurnAdditionalDetailId");

                    b.HasIndex("TurnId");

                    b.ToTable("TurnAdditionalDetails", (string)null);

                    b.HasComment("Información de los Detalles Adicionales de los Turnos");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.TurnDetail", b =>
                {
                    b.Property<long>("TurnId")
                        .HasColumnType("bigint")
                        .HasComment("Identificador del Turno");

                    b.Property<int>("CollaboratorId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Colaborador");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Servicio");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha Última Modificación del Registro");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasComment("Precio Servico del Turno");

                    b.HasKey("TurnId", "CollaboratorId", "ServiceId")
                        .HasName("PK_TurnDetails");

                    b.HasIndex("CollaboratorId");

                    b.HasIndex("ServiceId");

                    b.ToTable("TurnDetails", (string)null);

                    b.HasComment("Información del Detalle de los Turnos");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.TypeUser", b =>
                {
                    b.Property<int>("TypeUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador Único del Tipo de Usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeUserId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Descripción del Tipo de Usuario");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de la Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de la Última Modificación del Registro");

                    b.HasKey("TypeUserId");

                    b.ToTable("TypeUsers", (string)null);

                    b.HasComment("Información de los Tipos de Usuarios");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Identificador Único del Usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación de Registro");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Correo Electrónico del Usuario");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Estás Activo) (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Última Modificación de Registro");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Contraseña del Usuario");

                    b.Property<int>("RelatedUser")
                        .HasColumnType("int");

                    b.Property<int>("TypeUserId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Tipo de Usuario");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("UserName")
                        .HasComment("Login del Usuario");

                    b.HasKey("UserId");

                    b.HasIndex("TypeUserId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("users_un");

                    b.ToTable("Users", (string)null);

                    b.HasComment("Información de los Usuarios");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Usuario");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasComment("Identificador del Rol");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Creación del Registro");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de Creación del Registro");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("¿Está Activo? (1 = Si, 0 = No)");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Usuario de Última Modificación del Registro");

                    b.Property<DateTime>("LastModifiedOn")
                        .HasColumnType("datetime")
                        .HasComment("Fecha Última Modificación del Registro");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_UserRoles");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasComment("Información de los Roles de Usuarios");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Collaborator", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Gender", "Gender")
                        .WithMany("Collaborators")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("Collaborator_GenderId_FK");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.CollaboratorService", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Collaborator", "Collaborator")
                        .WithMany("CollaboratorServices")
                        .HasForeignKey("CollaboratorId")
                        .IsRequired()
                        .HasConstraintName("CollaboratorServices_CollaboratorId_FK");

                    b.HasOne("BeautySalonManage.Domain.Entities.Service", "Service")
                        .WithMany("CollaboratorServices")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("CollaboratorServices_ServiceId_FK");

                    b.Navigation("Collaborator");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Customer", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Gender", "Gender")
                        .WithMany("Customers")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Customer_Gender_GenderId");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.MenuOptionRole", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.MenuOption", "MenuOption")
                        .WithMany("MenuOptionRoles")
                        .HasForeignKey("MenuOptionId")
                        .IsRequired()
                        .HasConstraintName("MenuOptionRoles_MenuOptionId_FK");

                    b.HasOne("BeautySalonManage.Domain.Entities.Role", "Role")
                        .WithMany("MenuOptionRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("MenuOptionRoles_RoleId_FK");

                    b.Navigation("MenuOption");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Turn", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Status", "Status")
                        .WithMany("Turns")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("TurnsStatus_FK");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.TurnAdditionalDetail", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Turn", "Turn")
                        .WithMany("TurnAdditionalDetails")
                        .HasForeignKey("TurnId")
                        .IsRequired()
                        .HasConstraintName("TurnAdditionalDetailsTurns_FK");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.TurnDetail", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Collaborator", "Collaborator")
                        .WithMany("TurnDetails")
                        .HasForeignKey("CollaboratorId")
                        .IsRequired()
                        .HasConstraintName("TurnDetailsCollaborator_FK");

                    b.HasOne("BeautySalonManage.Domain.Entities.Service", "Service")
                        .WithMany("TurnDetails")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("TurnDetailsService_FK");

                    b.HasOne("BeautySalonManage.Domain.Entities.Turn", "Turn")
                        .WithMany("TurnDetails")
                        .HasForeignKey("TurnId")
                        .IsRequired()
                        .HasConstraintName("TurnDetailsTurn_FK");

                    b.Navigation("Collaborator");

                    b.Navigation("Service");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.User", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.TypeUser", "TypeUser")
                        .WithMany("Users")
                        .HasForeignKey("TypeUserId")
                        .IsRequired()
                        .HasConstraintName("Users_FK");

                    b.Navigation("TypeUser");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("BeautySalonManage.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("UserRoles_RoleId_FK");

                    b.HasOne("BeautySalonManage.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("UserRoles_UserId_FK");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Collaborator", b =>
                {
                    b.Navigation("CollaboratorServices");

                    b.Navigation("TurnDetails");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Collaborators");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.MenuOption", b =>
                {
                    b.Navigation("MenuOptionRoles");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Role", b =>
                {
                    b.Navigation("MenuOptionRoles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Service", b =>
                {
                    b.Navigation("CollaboratorServices");

                    b.Navigation("TurnDetails");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Status", b =>
                {
                    b.Navigation("Turns");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.Turn", b =>
                {
                    b.Navigation("TurnAdditionalDetails");

                    b.Navigation("TurnDetails");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.TypeUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BeautySalonManage.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
